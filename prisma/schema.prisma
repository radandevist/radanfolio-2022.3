generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DB_URL")
  shadowDatabaseUrl = env("SHADOW_DB_URL")
}

model User {
  id            String    @id @default(cuid())
  firstName     String?
  lastName      String
  userName      String    @unique
  email         String    @unique
  emailVerified DateTime?
  profileImage  String?
  role          Role
  posts         Post[]
  comments      Comment[]
  accounts      Account[]
  sessions      Session[]
}

enum Role {
  ADMIN
  USER
}

model Post {
  id          String    @id @unique @default(cuid())
  coverImage  String
  title       String
  content     String    @db.LongText
  userId      String
  author      User      @relation(fields: [userId], references: [id])
  comments    Comment[]
  publishedAt DateTime?
  updatedAt   DateTime?
  deleted     Boolean   @default(false)
}

model Comment {
  id      String @id @unique @default(cuid())
  content String
  userId  String
  author  User   @relation(fields: [userId], references: [id])
  postId  String
  post    Post   @relation(fields: [postId], references: [id])
}

// NEXT-AUTH

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
